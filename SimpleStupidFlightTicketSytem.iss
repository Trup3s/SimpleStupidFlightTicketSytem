; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "SimpleStupidFlightTicketSytem"
#define MyAppVersion "0.0"
#define MyAppPublisher "Chronophylos"
#define MyAppURL "chronophylos.github.io/projects/SimpleStupidFlightTicketSytem"
#define MyAppExeName "SSFTS-GUI.exe"
#define PythonVersion "3.5.0"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{39C3441B-A890-41B3-90BE-5080F8D91285}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\{#MyAppPublisher}\{#MyAppName}
DisableProgramGroupPage=yes
OutputDir=D:\Work\Projects\SimpleStupidFlightTicketSytem\Installer
OutputBaseFilename=SSFTS-{#MyAppVersion}
Compression=lzma
SolidCompression=yes

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked
Name: "quicklaunchicon"; Description: "{cm:CreateQuickLaunchIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked; OnlyBelowVersion: 0,6.1

[Files]
Source: "D:\Work\Projects\SimpleStupidFlightTicketSytem\SSFTS-GUI\bin\Release\SSFTS-GUI.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "D:\Work\Projects\SimpleStupidFlightTicketSytem\SSFTS-GUI\bin\Release\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Code]

// Result:
//  -1 ==  Left is bigger
//   0 == Both are the same
//   1 == Right is bigger
function CompareSemVersion(LeftVersion: String; RightVersion: String): Integer;
var
  TmpIndex1: Integer;
  TmpIndex2: Integer;
  LMajor, LMinor, LPatch: String;
  RMajor, RMinor, RPatch: String;
begin
  TmpIndex1 := Pos('.', LeftVersion) - 1;
  LMajor := Copy(LeftVersion, 1, TmpIndex1)
  TmpIndex2 := Pos('.', Copy(LeftVersion, TmpIndex1, Length(LeftVersion))) - 1 
  LMinor := Copy(LeftVersion, TmpIndex1 + 2, TmpIndex2)
  LPatch := Copy(LeftVersion, TmpIndex1 + 2 + TmpIndex2 + 1, Length(LeftVersion))

  TmpIndex1 := Pos('.', RightVersion) - 1;
  RMajor := Copy(RightVersion, 1, TmpIndex1)
  TmpIndex2 := Pos('.', Copy(RightVersion, TmpIndex1, Length(RightVersion))) - 1 
  RMinor := Copy(RightVersion, TmpIndex1 + 2, TmpIndex2)
  RPatch := Copy(RightVersion, TmpIndex1 + 2 + TmpIndex2 + 1, Length(RightVersion))

  //MsgBox('L: ' + LMajor + '.' + LMinor + '.' + LPatch + ' == ' + LeftVersion, mbInformation, MB_OK);
  //MsgBox('R: ' + RMajor + '.' + RMinor + '.' + RPatch + ' == ' + RightVersion, mbInformation, MB_OK);

  if StrToInt(LMajor) > StrToInt(RMajor) then begin
    Result := -1;
    //MsgBox('LMajor > RMajor', mbInformation, MB_OK);
  end else if StrToInt(LMajor) < StrToInt(RMajor) then begin
    Result := 1;
    //MsgBox('LMajor < RMajor', mbInformation, MB_OK);
  end else begin
    if StrToInt(LMinor) > StrToInt(RMinor) then begin
      Result := -1;
      //MsgBox('LMinor > RMinor', mbInformation, MB_OK);
    end else if StrToInt(LMinor) < StrToInt(RMinor) then begin
      Result := 1;
      //MsgBox('LMinor < RMinor', mbInformation, MB_OK);
    end else begin
      if StrToInt(LPatch) > StrToInt(RPatch) then begin
        Result := -1;
        //MsgBox('LPatch > RPatch', mbInformation, MB_OK);
      end else if StrToInt(LPatch) < StrToInt(RPatch) then begin
        Result := 1;
        //MsgBox('LPatch < RPatch', mbInformation, MB_OK);
      end else begin
        Result := 0;
        //MsgBox('L == R', mbInformation, MB_OK);
      end;
    end;      
  end;
end;

function CheckPythonVersion(RequiredVersion: String): Boolean;
var 
  PythonInstalled: Boolean;
  PythonVersion: Integer;
  ResultCode: Integer;
  TmpFileName: String;
  Lines: TArrayOfString;
begin
  Result := False;
  TmpFileName := ExpandConstant('{tmp}') + '\pyver.txt';
  Exec('cmd.exe', '/c python.exe --version > "' + TmpFileName + '"', '', SW_SHOW, ewWaitUntilTerminated, ResultCode);
  if LoadStringsFromFile(TmpFileName, Lines) then begin
    if CompareSemVersion(RequiredVersion, copy(Lines[0], 7, Length(Lines[0]) + 1 - 7)) >= 0 then begin 
      Result := True;
      MsgBox('Python Version is OK', mbInformation, MB_OK);
    end;
  end;
  DeleteFile(TmpFileName); 
end;

function InitializeSetup(): Boolean;
begin
  if not CheckPythonVersion('{#PythonVersion}') then begin
    MsgBox('Python Version {#PythonVersion} is required. Please Install Python {#PythonVersion} to use this Program.', mbCriticalError, MB_OK);
    //InstallPython3()
    Result := False;
  end else begin
    Result := True;
  end;
end;

[Icons]
Name: "{commonprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{commondesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon
Name: "{userappdata}\Microsoft\Internet Explorer\Quick Launch\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: quicklaunchicon

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent

